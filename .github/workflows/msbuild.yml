name: MSBuild

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUCTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUCTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:AllowUnsafeBlocks=true /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUCTION_FILE_PATH}}

    - name: Upload build to XSharp.github.io
      if: github.repository == 'sharivan/XSharp' && github.ref == 'refs/heads/master'
      run: |
        7z a XSharpDevBuild.zip .\XSharp\bin\Release\*
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git clone -q --branch master --single-branch "https://github.com/sharivan/XSharp.github.io.git"
        cd XSharp.github.io
        git checkout -q --orphan artifacts
        git reset
        mv ../XSharpDevBuild.zip . -force
        git add XSharpDevBuild.zip
        git commit -m "Add Development Build"
        git push -q --force https://action:${{ secrets.DEV_BUILD_UPLOAD }}@github.com/sharivan/XSharp.github.io.git
